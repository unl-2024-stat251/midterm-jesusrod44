---
title: "251 Midterm Exam"
author: "Jesus Rodriguez"
date: '2024-03-07'
execute:
  error: false
categories:
- Exam
- Week07
editor: 
  markdown: 
    wrap: sentence
---

In this exam, you'll be using data collected about US polling places.
The [Center for Public Integrity](https://publicintegrity.org/) assembled this data using open records requests and contact with state or county election officials.
Full documentation is available on the [github repository for the data](https://github.com/PublicI/us-polling-places) - each state's details can be found in a README file for that state; there is also a machine-readable `manifest.yaml` file for each state provided.

We will start out by using data assembled by the TidyTuesday project, but will eventually get to the raw data as well.

The raw CSV data is available at https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-01-16/polling_places.csv

```{r r-setup}
# load any R packages you use in this chunk
library(ggplot2)
library(dplyr)
library(tidyverse)
library(tidyr)
library(skimr)
library(stringr)
```

```{python py-setup}
# load any python packages you use in this chunk
import pandas as pd
import plotnine as p9
import seaborn as sns
import matplotlib.pyplot as plt
from skimpy import skim

```

# Data Input - Polling Places

(30 pts)

## Data File Inspection

Here are the first six lines of the TidyTuesday CSV file:

```         
election_date,state,county_name,jurisdiction,jurisdiction_type,precinct_id,precinct_name,polling_place_id,location_type,name,address,notes,source,source_date,source_notes
2020-11-03,AL,AUTAUGA,AUTAUGA,county,NA,AUTAUGAVILLE VOL FIRE DEPT,NA,election_day,AUTAUGAVILLE VOL FIRE DEPT,"2610 HIGHWAY 14 W, AUTAUGAVILLE, AL 36003",NA,ORR,2020-10-21,NA
2020-11-03,AL,AUTAUGA,AUTAUGA,county,NA,BILLINGSLEY COMMUNITY CENTER,NA,election_day,BILLINGSLEY COMMUNITY CENTER,"2159 COUNTY RD 37, BILLINGSLEY, AL 36006",NA,ORR,2020-10-21,NA
2020-11-03,AL,AUTAUGA,AUTAUGA,county,NA,BOONE'S CHAPEL,NA,election_day,BOONE'S CHAPEL,"2301 COUNTY RD 66, PRATTVILLE, AL 36067",NA,ORR,2020-10-21,NA
2020-11-03,AL,AUTAUGA,AUTAUGA,county,NA,BOOTH VOL FIRE DEPT,NA,election_day,BOOTH VOL FIRE DEPT,"1701 COUNTY ROAD 10, BOOTH, AL 36008",NA,ORR,2020-10-21,NA
2020-11-03,AL,AUTAUGA,AUTAUGA,county,NA,CAMELLIA BAPTIST CH,NA,election_day,CAMELLIA BAPTIST CH,"201 WOODVALE ROAD, PRATTVILLE, AL 36067",NA,ORR,2020-10-21,NA
```

1.  What is the file delimiter?
    (1 pt)\
    <Each field is separated by a comma>

2.  What is the header?
    (1 pt)\
    <The first row>

3.  How many columns will the data have when it is read in using R or Python?
    (1 pt)\
    \<The number of column names is 15 so there will be 15 columns\>

4.  How is the data stored differently in the address field compared to the name field (1 pt), and why is this different handling necessary (1 pt)?\
    \<The address contains commas and since commas are the delimiter the address is surrounded by " " in order for those commas to not be counted as delimiters\>

## Reading the Data

Read in the data in R (5 pts) and in python (5 pts).

Make sure to load any packages which are necessary to run your code in the setup chunks at the beginning of the document.

```{r r-read-data}
data<-read.csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-01-16/polling_places.csv", header = TRUE)

```

```{python py-read-data}
data = pd.read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-01-16/polling_places.csv")

datap = data
```

## Summarize the Data

Using any method you choose from either language, fill in the following table.

Language used: <Fill in>

Make sure your terms match the language you're using and the code you provided above.
If you use code to get these values (which is probably a good idea), please use the code chunks provided here:

```{r r-data-summary-code}

skim(data)
summary(data)

str(data)

```

```{python py-data-summary-code}

skim(datap)
```

When computing the number of unique values, exclude missing values.

| Column Name       | Data Type (5 pts) | \# missing values (5 pts) | \# unique values (5 pts) |
|------------------|------------------|------------------|------------------|
| election_date     | character         | 0                         | 7                        |
| state             | character         | 0                         | 39                       |
| county_name       | character         | 114568                    | 1880                     |
| jurisdiction      | character         | 103599                    | 9206                     |
| jurisdiction_type | character         | 60                        | 7                        |
| precinct_id       | character         | 148834                    | 50287                    |
| precinct_name     | character         | 96860                     | 110887                   |
| polling_place_id  | character         | 408178                    | 11145                    |
| location_type     | character         | 192830                    | 6                        |
| name              | character         | 75                        | 105985                   |
| address           | character         | 2996                      | 151319                   |
| notes             | character         | 416312                    | 9614                     |
| source            | character         | 0                         | 4                        |
| source_date       | character         | 0                         | 36                       |
| source_notes      | character         | 425353                    | 4                        |

: Summary of Polling Data

# Data Cleaning - Polling Places over Time

(50 pts)

For this part of the exam, you'll use your student ID to get the state you'll be working with.

```{r student-id-state-assign}
my_nuid <- 10774092 # Change this value to your NUID
state_ids <- readRDS("state-ids.RDS")
my_state <- state_ids$state[my_nuid%%37]
print(my_state)
```

Your end goal is to get a plot of the number of available polling places in each election, with separate lines for each jurisdiction (e.g. county) within your state.

## Steps

(10 pts)

Write out the steps (in plain language) required to get from the polling place data provided [here](https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-01-16/polling_places.csv) to the data you need to create your plot.
Make sure to remove polling places which do not make sense - e.g. those with an address consisting of just the state name, or those named "DO NOT USE".

For each step, identify the data manipulation verb you will use, and any variables you will pass in as arguments.
Fill in the following table when you are finished.
Add new rows by moving to a new line, and separate each cell in the table with `|` (spaces matter).
`|` is on the key above the enter key and shares a key with `\` (backslash).
You will need to hold shift down.

| Step \# | Verb      | Arguments                                                  |
|-------------------|-------------------|-----------------------------------|
| 1       | filter    | remove rows where the address is just two capital letters  |
| 2       | filter    | remove rows where the precinct_name is DO NOT USE          |
| 3       | filter    | remove rows where the name has DO NOT USE in it            |
| 4       | filter    | keep rows where state is NM                                |
| 5       | group_by  | group the nm_data by county name and the election date     |
| 6       | summarize | count the number of rows for each county and election date |

## Code

(10 pts)

Write code in R or python to execute the steps you outlined above.

```{r}

cdata <- data %>%
  
  #I used the grepl() function to find a pattern in the address cells, this pattern
  #starts with ( ^ ) all capital letters A through Z ( [A-Z] ), this happens twice ({2}) 
  #and it ends there ($)
  
  filter(!grepl("^[:upper:]{2}$", address)) %>%
  filter(!grepl("DO NOT USE", name)) %>%
  filter(!grepl("DO NOT USE", precinct_name)) ### %>%
  
  #There were some rows where DO NOT USE was not the only thing in the name cell
  #So I used grepl() to filter out the pattern "DO NOT USE"
  #For the third filtering, I had a problem with it removing all the NA precinct names, which would then     #give me 0 observations when I tried to only keep New Mexico's observations.
  
#Keeping only NM rows
nm_data <- cdata %>%
  filter(state == "NM")

#There's no precinct_names for NM so it's grouped by county name
nm_data <- nm_data %>%
  group_by(county_name, election_date) %>%
  summarize(num_poll = n(),
            )
#This helps me have the data on the x axis go from 2014 - 2020
nm_data$election_date <- as.Date(nm_data$election_date)
nm_data$election_year <- year(nm_data$election_date)

```

## Chart Description

(7 pts)

Use the grammar of graphics to identify the components of the chart here, which provides the data for Wisconsin.
![Wisconsin counties where the number of polling places changed, 2012-2020](wisconsin-example.jpg){width="50%"}

-   geom: geom_line()

-   aesthetics: (list at least 3)

    -   x = election_date

    -   y = number of polling places

    -   group = precinct_name

-   coordinate system: Cartesian

-   y axis scale: range of election_date = (2012,2020)

-   x axis scale: range of number of polling places = (0, \~400)

## Chart

(20 pts)

Write code in R or python to create a chart like that shown at the beginning of this example (5 pts).
Make sure your axes are labeled (5 pts) and your chart has a title (5 pts).
Include your plot in this document and make sure you have a figure caption that describes what someone should notice in the chart (5 pts) You may do this either by modifying the chunk options or by using `include=F` and manually including the picture with a caption.

```{r}

ggplot(nm_data, aes(x = election_year, y = num_poll, group = county_name)) +
  geom_line() +
  labs(x = "Date", y = "Number of Polling Places", title = "New Mexico Polling Place Changes, 2014-2020") 
  #left over from when I kept using color = county_name instead of group = county_name
  #+guides(color = "none")

```

\[New Mexico counties where the number of polling places changed, 2014-2020\]

## Modifications

Evaluate the chart you created for comprehensibility and accessibility.
(1 pt)

Only one line is legible in the chart, the rest are so jumbled together that it is hard to know what county is which.
Which leads to me my next point, you don't know which county is which line at all.

What modifications might you add to this chart to make it clearer and more understandable?
(2 pts)

Have each line have its own color, or have some lines be dashed or bolded.
I feel that a guide would take up too much space.

# Data Processing

(20 pts)

You want to mail a letter to every polling place in the state you were assigned.
In order to do this, you need to separate out the pieces of the address: building number, street, city, state, and zip code.
Note that not all addresses will have all of these components - in Alaska, for example, there are often not street numbers or even names.

## Function Steps

(5 pts)

Use the following addresses to think through the steps you will need to accomplish this task.

```         
Tatitlek, AK 99677
First Street, Cordova, AK 99574
105 ICE ST, MENASHA, WI 54952-3223
1025 W 5TH AVE, OSHKOSH, WI 54902
1702 COUNTY ROAD 40 W, PRATTVILLE, AL 36067
5281 HIGHWAY 29, CORINTH VFD (PEROTE STATION), BANKS, AL 36005
713 W. MOUNTAIN AVENUE, JACKSONVILLE, AL 36265
COMMUNITY CENTER, 1168 HWY 84, SILAS, AL 36919
```

Write out the steps your function will need to accomplish in plain language.

The format for an address is Building Number Street, City, State Zipcode

However : COMMUNITY CENTER, 1168 HWY 84, SILAS, AL 36919 , has a name that is not needed, so it will have to be removed or ignored somehow

1.  Have variables building name, building number, street, city, street, and zip code
2.  Extract from the given address the variables
3.  Extract them using patterns of how an address is set up and formatted. 
    Ex. State and Zipcode are usually at the end and is formatted: Two capital
    letters followed by 5 numbers and sometimes a hyphen and 4 numbers.
3.  If there is no such variable (no building name) have Building Name = NA

## Function Code - Single Address

(5 pts)

Write a function, `address_parser`, which can handle a single address and return a data structure containing each piece of the address, with NAs for pieces which are not matched.

(change this chunk to python if you'd prefer to use python over R for this task)

```{r, error=TRUE}
############################################THINKING

just_state_and_zip <- function(x) {
                                      #two capital letters followed by a space and at least 5 digits
                                      #if there is a - and 4 digits after the 5 digits include them
  state_and_zip <- str_extract_all(x, "[:upper:]{2} \\d{5}(-\\d{4})?")
  return(state_and_zip)
}

just_state_and_zip("Tatitlek, AK 99677-1111")
just_state_and_zip("COMMUNITY CENTER, 1168 HWY 84, SILAS, AL 36919")

##########################################################################


just_state_and_zip <- function(x) {
                                      #two capital letters followed by a space and at least 5 digits
                                      #if there is a - and 4 digits after the 5 digits include them
  state_and_zip <- str_extract_all(x, "[:upper:]{2} \\d{5}(-\\d{4})?")
  state <- str_extract_all(state_and_zip, "[:upper:]{2} ")
  zip <- str_extract_all(state_and_zip, "\\d{5}(-\\d{4})?")
  return(list("State" = state,"Zip Code" = zip))
}



########################################getting somewhere


just_state_and_zip <- function(x) {
  x <- toString(x)
                                      #two capital letters followed by a space and at least 5 digits
                                      #if there is a - and 4 digits after the 5 digits include them
  state_and_zip <- str_extract(x, "[:upper:]{2} \\d{5}(-\\d{4})?")
  y <- str_remove(x, "[:upper:]{2} \\d{5}(-\\d{4})?")
  state <- str_extract(state_and_zip, "[:upper:]{2} ")
  zip <- str_extract(state_and_zip, "\\d{5}(-\\d{4})?")
                        #Extract the letters in a pattern that go 
                        #"  letters  and ,state zipcode" but don't include the ",state zipcode" that's what the (?=...) is for
                        #"[[:alpha:]] +                  (?=, [[:upper:]]{2} \\d{5})"
  city <- str_extract(x, "[[:alpha:]]+(?=, [[:upper:]]{2} \\d{5})")
  return(list("State" = state,"Zip Code" = zip, "City" = city, y))
}

#######################################################################################

just_state_and_zip <- function(x) {
  x <- toString(x)
                                      #two capital letters followed by a space and at least 5 digits
                                      #if there is a - and 4 digits after the 5 digits include them
  state_and_zip <- str_extract(x, "[:upper:]{2} \\d{5}(-\\d{4})?")
  y <- str_remove(x, "[:upper:]{2} \\d{5}(-\\d{4})?")
  state <- str_extract(state_and_zip, "[:upper:]{2} ")
  zip <- str_extract(state_and_zip, "\\d{5}(-\\d{4})?")
                        #Extract the letters in a pattern that go 
                        #"  letters  and ,state zipcode" but don't include the ",state zipcode" that's what the (?=...) is for
                        #"[[:alpha:]] +                  (?=, [[:upper:]]{2} \\d{5})"
  city <- str_extract(x, "[[:alpha:]]+(?=, [[:upper:]]{2} \\d{5})")
  street <- str_trim(str_replace_all(y, city, ""))
  street <- str_trim(str_replace_all(street, ",", ""))
  return(list("State" = state,"Zip Code" = zip, "City" = city, "Street" = street))
}
############################################THE FINAL FUNCTION
just_state_and_zip <- function(x) {
  x <- toString(x)
  #two capital letters followed by a space and at least 5 digits
  #if there is a - and 4 digits after the 5 digits include them
  state_and_zip <- str_extract(x, "[:upper:]{2} \\d{5}(-\\d{4})?")
  
  #Remove the state and zipcode
  y <- str_remove(x, "[:upper:]{2} \\d{5}(-\\d{4})?")
  #Extract state by itself
  state <- str_extract(state_and_zip, "[:upper:]{2} ")
  #Extract zip code by itself
  zip <- str_extract(state_and_zip, "\\d{5}(-\\d{4})?")
  
  #Extract the letters in a pattern that go 
  #"  letters  and ,state zipcode" but don't include the ",state zipcode" that's what the (?=...) is for
  #"[[:alpha:]] +                  (?=, [[:upper:]]{2} \\d{5})"
  city <- str_extract(x, "[[:alpha:]]+(?=, [[:upper:]]{2} \\d{5})")
  
  
  y <- str_trim(str_replace_all(y, city, ""))
  #street<- str_trim(str_replace_all(y, ",", ""))
  street<-y
  
  #Extracting the building number from the street
  building_num<- str_extract(street, "\\d{3,5}")
  
  #I tried to have street be by itself, so no number and no name, but I gave up, this worked though
  street_nonum<- str_replace(y, building_num, "")
  
  #Extracting the building name from the street... I tried ok
  #I would put a # on one when it stopped working then I worked on the next one
  #building_name <- str_extract(y, "(?<=,\\s)?[[:alpha:]]+(?=,\\s|$)")
  #building_name <- str_extract(street, "[[:alpha:]]+(?=,\\s|$)")
  #building_name <- str_extract(street_nonum, "[^0-9,]+(?=,) | [:alpha:].*?(?=\\d)")
  #building_name <- str_extract(street, "[:alpha:].*?(?=\\d)")
  #building_name <- str_trim(building_name)
  
  
  #Cleaning up punctuation in the street
  street<-str_replace_all(street, "[:punct:]", "")
  street<-str_trim(street)
  #If street is blank, then make it NA
  if (street == ""){
    street = NA
  }
  
  return(list("State" = state,"Zip Code" = zip, "City" = city, "Street" = street, "Building Number" = building_num))
}


just_state_and_zip("5281 HIGHWAY 29, CORINTH VFD (PEROTE STATION), BANKS, AL 36005")
just_state_and_zip("COMMUNITY CENTER, 1168 HWY 84, SILAS, AL 36919")

```


```{r single-address-parser}

address_parser <- function(x) {
  x <- toString(x)
  #two capital letters followed by a space and at least 5 digits
  #if there is a - and 4 digits after the 5 digits include them
  state_and_zip <- str_extract(x, "[:upper:]{2} \\d{5}(-\\d{4})?")
  
  #Remove the state and zipcode
  y <- str_remove(x, "[:upper:]{2} \\d{5}(-\\d{4})?")
  #Extract state by itself
  state <- str_extract(state_and_zip, "[:upper:]{2} ")
  #Extract zip code by itself
  zip <- str_extract(state_and_zip, "\\d{5}(-\\d{4})?")
  
  #Extract the letters in a pattern that go 
  #"  letters  and ,state zipcode" but don't include the ",state zipcode" that's what the (?=...) is for
  #"[[:alpha:]] +                  (?=, [[:upper:]]{2} \\d{5})"
  city <- str_extract(x, "[[:alpha:]]+(?=, [[:upper:]]{2} \\d{5})")
  
  
  y <- str_trim(str_replace_all(y, city, ""))
  #street<- str_trim(str_replace_all(y, ",", ""))
  street<-y
  
  #Extracting the building number from the street
  building_num<- str_extract(street, "\\d{3,5}")
  
  #I tried to have street be by itself, so no number and no name, but I gave up, this worked though
  street_nonum<- str_replace(y, building_num, "")
  
  #Extracting the building name from the street... I tried ok
  #I would put a # on one when it stopped working then I worked on the next one
  #building_name <- str_extract(y, "(?<=,\\s)?[[:alpha:]]+(?=,\\s|$)")
  #building_name <- str_extract(street, "[[:alpha:]]+(?=,\\s|$)")
  #building_name <- str_extract(street_nonum, "[^0-9,]+(?=,) | [:alpha:].*?(?=\\d)")
  #building_name <- str_extract(street, "[:alpha:].*?(?=\\d)")
  #building_name <- str_trim(building_name)
  
  
  #Cleaning up the punctuation in the street
  street<-str_replace_all(street, "[:punct:]", "")
  street<-str_trim(street)
  
  #If street is blank, then make it NA
  if (is.na(street) || street == "") {
    street = NA
}

  
  return(list("State" = state,"Zip Code" = zip, "City" = city, "Street" = street, "Building Number" = building_num))
}

```

This chunk will test your function on the addresses provided as examples.
(change this chunk to python if you used python above)

```{r single-address-parser-test, error = T}
address_parser("Tatitlek, AK 99677")
address_parser("First Street, Cordova, AK 99574")
address_parser("105 ICE ST, MENASHA, WI 54952-3223")
address_parser("1025 W 5TH AVE, OSHKOSH, WI 54902")
address_parser("1702 COUNTY ROAD 40 W, PRATTVILLE, AL 36067")
address_parser("5281 HIGHWAY 29, CORINTH VFD (PEROTE STATION), BANKS, AL 36005")
address_parser("713 W. MOUNTAIN AVENUE, JACKSONVILLE, AL 36265")
address_parser("COMMUNITY CENTER, 1168 HWY 84, SILAS, AL 36919")

```

## Function Code - Vector

(5 pts)

Write a function, `address_vec`, which can parse a vector of addresses and return a data frame with columns corresponding to each piece of the address.

(change this chunk to python if you'd prefer to use python over R for this task)

```{r vector-address-parser}

address_vec <- function(x) {
  #run the parser function
  address_parser(x)
  
  #map each x value into a row in a data frame using the results of address_parser
  dataf <- map_dfr(x, address_parser)
  
  return(dataf)
}


```

This chunk will test your function on the addresses provided as examples.
Delete whichever chunk corresponds to the language you didn't use.

```{r r-vector-address-parser-test, error = T}
test_vec <- c("Tatitlek, AK 99677", "First Street, Cordova, AK 99574", "105 ICE ST, MENASHA, WI 54952-3223", "1025 W 5TH AVE, OSHKOSH, WI 54902", "1702 COUNTY ROAD 40 W, PRATTVILLE, AL 36067", "5281 HIGHWAY 29, CORINTH VFD (PEROTE STATION), BANKS, AL 36005", "713 W. MOUNTAIN AVENUE, JACKSONVILLE, AL 36265", "COMMUNITY CENTER, 1168 HWY 84, SILAS, AL 36919")
address_vec(test_vec)
```

```{python py-vector-address-parser-test, error = T}
test_vec = ["Tatitlek, AK 99677", "First Street, Cordova, AK 99574", "105 ICE ST, MENASHA, WI 54952-3223", "1025 W 5TH AVE, OSHKOSH, WI 54902", "1702 COUNTY ROAD 40 W, PRATTVILLE, AL 36067", "5281 HIGHWAY 29, CORINTH VFD (PEROTE STATION), BANKS, AL 36005", "713 W. MOUNTAIN AVENUE, JACKSONVILLE, AL 36265", "COMMUNITY CENTER, 1168 HWY 84, SILAS, AL 36919"]
address_vec(test_vec)
```

## Function Evaluation

Use your function to parse a vector of the unique polling place addresses in your state, creating a data table of address components for your letters.
(5 pts)

```{r r-function-eval}
#Keeping only NM rows
nm_data <- cdata %>%
  filter(state == "NM")

nma<-nm_data$address

nma<-as.vector(nma)

nma <-address_vec(nma) 

print(nma)


```

Where did your function have issues, if it did?
(5 pts)

I spent too much time trying to extract the building name from the street. Way too much time. I kept trying to have patterns where it may or may not be preceeded by a comma or it may or may not be followed by a comma, but I couldn't get anything to work. I tried extracting the building number, so I was left with the street and building name, from there I tried to extract the street and the building name but I had no luck. 
Once I figured out that I could extract the state and zip code by how stringr works and not trying to rely on the grepl() function, it clicked in my head and I was easily able to get the city and street, even if the street contained the number and name. 

